---
title: "StatComp20062"
author: 'RayLiu'
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{StatComp20062}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

## Overview

__StatComp20062__ is a simple R package developed to compute the  standard error of an estimator with jackknife method, and to compute the knockoff matrix which is useful in knockoff method. Two functions are included, namely, _jack_ and _create.equi.X_ . For each function, examples are given.

## Introduction to _jack_ 

The source R code for _jack_ is as follows:

***Jackknife***
```{r}
jack <- function(data,fun=NULL){
  theta.hat <- fun(data)
  n <- length(data)      #sample size
  M <- numeric(n)
  for (i in 1:n) { #leave one out
    y <- data[-i]
    M[i] <- fun(y)
  }
  Mbar <- mean(M)
  se.jack <- sqrt(((n - 1)/n) * sum((M - Mbar)^2))
  return(se.jack)
}
```

## Introduction to _create.equi.X_ 

The source R code for _create.equi.X_ is as follows:

***knockoff***
```{r}
create_equi_X <- function(X){
  n = nrow(X)
  p = ncol(X)
  #The rows of input matrix must be more than the columns num
  if (n < 2*p) 
    stop("Input X must have dimensions n >= 2*p") 
  #Compute l-2 norm of each column
  Xsqure <- apply(X,2,FUN = function(x)sqrt(sum(x^2))) 
  #Standardize the input matrix by column
  X3 <- sweep(X,2,Xsqure,FUN = "/")
  #Compute the Gram matrix of the input matrix, which is named as 'Sigma' in the 'knockoff' paper
  Gram <- t(X3)%*%X3
  GramD <- eigen(Gram)
  sj <- min(2*min(GramD$values),1)#extract the minimum eigenvalue of 'Sigma', to compute the identical s_j for all j
  diags <- diag(rep(sj,p))#construct diag{s}
  #Compute the matrix C in the formula
  CC <- 2*diags- diags%*%solve(Gram)%*%diags
  a <- svd(CC)
  C <- t(a$u%*%diag(sqrt(a$d)))
  #Compute the matrix Utide in the formula, which is orthogonal to the X3
  Utide <- svd(X3,nu=n,nv=0)$u[,(n-p+1):n]
  #Compute the knockoff matrix Xtide 
  Xtide <- X3%*%(diag(nrow = p)-solve(Gram)%*%diags)+Utide%*%C
  structure(list(X = X3, Xk = Xtide, s_j = sj), class = "knockoff.variables")
}
```

In order to use the knockoff filter, we'd firstly need to construct knockoff matrix.Specifically, to construct the knockoffs, we first calculate the Gram matrix $\Sigma=X^TX$ of the original features, after normalizing each feature such that $\Sigma_{jj}=\|X_j\|^2=1 $ for all j. We will ensure that these knockoff features obey
$$\tilde X^T\tilde X=\Sigma,\quad X^T\tilde X=\Sigma-diag\{s\}$$

where $s$ is a p-dimensional nonnegative vector.

To generate $\tilde X$, these two authors in the paper proposed a solution, which shows below:
$$\tilde X=X(I-\Sigma^{-1}diag\{s\})+\tilde UC$$

where $\tilde U \in R_{n×p}$ is an orthonormal matrix whose column space is orthogonal to that of $X$ so that $\tilde U^TX = 0$. $C^⊤C = 2diag\{s\} − diag{s}\Sigma^{−1} diag\{s\} \succcurlyeq 0$.

The selection of $s$ that commit the constraints is crutial. In my code, I use the Equi-correlated knockoffs: Here, $s_j = 2\lambda _{min}(\Sigma) \wedge 1$ for all j, so that all the correlations take on the identical value
$$  \left <X_j ,\tilde X_j\right> = 1− 2\lambda _{min}(\Sigma) \wedge 1.$$



 
 

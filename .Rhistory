git init # initialization
git add * # add local folders and files
git commit -m "first commit" # add a comment
git config --RayLiuUSTC "zhanghfd" # user name
git config --870083058@qq.com "zhangh@ustc.edu.cn"
?knockoff
??knockoff
library(knockoff)
??knockoff
create.solve_sdp
create.fixed
?structure
structure(1:6, dim = 2:3)
create.equi.X <- function(X2){
n = nrow(X2)
p = ncol(X2)
#The rows of input matrix must be more than the columns num
if (n <= 2*p)
stop("Input X must have dimensions n > 2*p")
#Compute l-2 norm of each column
Xsqure <- apply(X2,2,FUN = function(x)sqrt(sum(x^2)))
#Standardize the input matrix by column
X3 <- sweep(X2,2,Xsqure,FUN = "/")
#Compute the Gram matrix of the input matrix, which is named as 'Sigma' in the 'knockoff' paper
Gram <- t(X3)%*%X3
GramD <- eigen(Gram)
sj <- min(2*min(GramD$values),1)#extract the minimum eigenvalue of 'Sigma', to compute the identical s_j for all j
diags <- diag(rep(sj,nrow(Gram)))#construct diag{s}
#Compute the matrix C in the formula
CC <- 2*diags- diags%*%solve(Gram)%*%diags
a <- svd(CC)
C <- t(a$u%*%diag(sqrt(a$d)))
#Compute the matrix Utide in the formula, which is orthogonal to the X3
Utide <- svd(X3,nu=nrow(X3),nv=0)$u[,(ncol(X3)+1):nrow(X3)]
#Compute the knockoff matrix Xtide
Xtide <- X3%*%(diag(nrow = nrow(Gram))-solve(Gram)%*%diags)+Utide%*%C
structure(list(X = X3, Xk = Xtide, sj = sj), class = "knockoff.variables")
}
n2 <- 200;p2 <- 100
X2 = matrix(rnorm(n2*p2),n2)
create.equi.X(X2)
Xsqure <- apply(X2,2,FUN = function(x)sqrt(sum(x^2)))
Xsqure <- apply(X2,2,FUN = function(x)sqrt(sum(x^2)))
X3 <- sweep(X2,2,Xsqure,FUN = "/")
Gram <- t(X3)%*%X3
GramD <- eigen(Gram)
sj <- min(2*min(GramD$values),1)
diags <- diag(rep(sj,nrow(Gram)))
CC <- 2*diags- diags%*%solve(Gram)%*%diags
a <- svd(CC)
C <- t(a$u%*%diag(sqrt(a$d)))
Utide <- svd(X3,nu=nrow(X3),nv=0)$u[,(ncol(X3)+1):nrow(X3)]
Xtide <- X3%*%(diag(nrow = nrow(Gram))-solve(Gram)%*%diags)+Utide%*%C
create.equi.X <- function(X2){
n = nrow(X2)
p = ncol(X2)
#The rows of input matrix must be more than the columns num
if (n < 2*p)
stop("Input X must have dimensions n >= 2*p")
#Compute l-2 norm of each column
Xsqure <- apply(X2,2,FUN = function(x)sqrt(sum(x^2)))
#Standardize the input matrix by column
X3 <- sweep(X2,2,Xsqure,FUN = "/")
#Compute the Gram matrix of the input matrix, which is named as 'Sigma' in the 'knockoff' paper
Gram <- t(X3)%*%X3
GramD <- eigen(Gram)
sj <- min(2*min(GramD$values),1)#extract the minimum eigenvalue of 'Sigma', to compute the identical s_j for all j
diags <- diag(rep(sj,p))#construct diag{s}
#Compute the matrix C in the formula
CC <- 2*diags- diags%*%solve(Gram)%*%diags
a <- svd(CC)
C <- t(a$u%*%diag(sqrt(a$d)))
#Compute the matrix Utide in the formula, which is orthogonal to the X3
Utide <- svd(X3,nu=n,nv=0)$u[,(p+1):n]
#Compute the knockoff matrix Xtide
Xtide <- X3%*%(diag(nrow = p)-solve(Gram)%*%diags)+Utide%*%C
structure(list(X = X3, Xk = Xtide, sj = sj), class = "knockoff.variables")
}
create.equi.X(X2)
create.equi.X <- function(X2){
n = nrow(X2)
p = ncol(X2)
#The rows of input matrix must be more than the columns num
if (n < 2*p)
stop("Input X must have dimensions n >= 2*p")
#Compute l-2 norm of each column
Xsqure <- apply(X2,2,FUN = function(x)sqrt(sum(x^2)))
#Standardize the input matrix by column
X3 <- sweep(X2,2,Xsqure,FUN = "/")
#Compute the Gram matrix of the input matrix, which is named as 'Sigma' in the 'knockoff' paper
Gram <- t(X3)%*%X3
GramD <- eigen(Gram)
sj <- min(2*min(GramD$values),1)#extract the minimum eigenvalue of 'Sigma', to compute the identical s_j for all j
diags <- diag(rep(sj,p))#construct diag{s}
#Compute the matrix C in the formula
CC <- 2*diags- diags%*%solve(Gram)%*%diags
a <- svd(CC)
C <- t(a$u%*%diag(sqrt(a$d)))
#Compute the matrix Utide in the formula, which is orthogonal to the X3
Utide <- svd(X3,nu=n,nv=0)$u[,(n-p+1):n]
#Compute the knockoff matrix Xtide
Xtide <- X3%*%(diag(nrow = p)-solve(Gram)%*%diags)+Utide%*%C
structure(list(X = X3, Xk = Xtide, sj = sj), class = "knockoff.variables")
}
create.equi.X(X2)
create.equi.X <- function(X2){
n = nrow(X2)
p = ncol(X2)
#The rows of input matrix must be more than the columns num
if (n < 2*p)
stop("Input X must have dimensions n >= 2*p")
#Compute l-2 norm of each column
Xsqure <- apply(X2,2,FUN = function(x)sqrt(sum(x^2)))
#Standardize the input matrix by column
X3 <- sweep(X2,2,Xsqure,FUN = "/")
#Compute the Gram matrix of the input matrix, which is named as 'Sigma' in the 'knockoff' paper
Gram <- t(X3)%*%X3
GramD <- eigen(Gram)
sj <- min(2*min(GramD$values),1)#extract the minimum eigenvalue of 'Sigma', to compute the identical s_j for all j
diags <- diag(rep(sj,p))#construct diag{s}
#Compute the matrix C in the formula
CC <- 2*diags- diags%*%solve(Gram)%*%diags
a <- svd(CC)
C <- t(a$u%*%diag(sqrt(a$d)))
#Compute the matrix Utide in the formula, which is orthogonal to the X3
Utide <- svd(X3,nu=n,nv=0)$u[,(n-p+1):n]
#Compute the knockoff matrix Xtide
Xtide <- X3%*%(diag(nrow = p)-solve(Gram)%*%diags)+Utide%*%C
structure(list(X = X3, Xk = Xtide, s_j = sj), class = "knockoff.variables")
}
stat.lasso_coefdiff
stat.glmnet_coefdiff
library(devtools)
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
#Homework 1
#Homework 1
#Homework 1
#Homework 1
#Homework 1#Homework 1
devtools::document()
warnings()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
warnings()
devtools::document()
devtools::document()
warnings()
library(roxygen2)
devtools::document()
devtools::document()
warnings()
devtools::check()
devtools::document()
warnings()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
library(knitr)
set.seed(12345)
dLaplace <- function(x){
y <- 0.5*exp(-abs(x))
return(y)
}
rw.Metropolis.L <- function(sigma, x0, N) {
x <- numeric(N)
x[1] <- x0
u <- runif(N)
k <- 0
for (i in 2:N) {
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (dLaplace(y)/dLaplace(x[i-1])))
x[i] <- y
else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
n <- 4  #degrees of freedom for target Student t dist.
N <- 2000
sigma <- c(.05, .5, 2,  16)
x0 <- 25
rw1 <- rw.Metropolis.L(sigma[1], x0, N)
rw2 <- rw.Metropolis.L(sigma[2], x0, N)
rw3 <- rw.Metropolis.L(sigma[3], x0, N)
rw4 <- rw.Metropolis.L(sigma[4], x0, N)
reject <- c(rw1$k, rw2$k, rw3$k, rw4$k)
no.reject <- NULL
#number of candidate points rejected
no.reject <- data.frame(sigma=sigma,no.reject=reject,accepted.rate=(N-reject)/N)
knitr::kable(no.reject)
par(mfrow=c(2,2))  #display 4 graphs together
alpha <- 0.025
refline <- c(log(2*alpha),-log(2)-log(alpha))
rw <- cbind(rw1$x, rw2$x, rw3$x,  rw4$x)
for (j in 1:4) {
plot(rw[,j], type="l",
xlab=bquote(sigma == .(round(sigma[j],3))),
ylab="X", ylim=range(rw[,j]))
abline(h=refline)
}
par(mfrow=c(1,1)) #reset to default
devtools::build()
install.packages('../StatComp_1.0.tar.gz',repo=NULL)
install.packages('C:/Users/DRZCW/Desktop/StatComp_1.0.tar.gz',repo=NULL)
install.packages('C:/Users/DRZCW/Desktop/StatComp20062_1.0.tar.gz',repo=NULL)
install.packages('C:/Users/DRZCW/Desktop/StatComp20062_1.0.tar.gz',repo=NULL)
n2 <- 200;p2 <- 100
X2 = matrix(rnorm(n2*p2),n2)
X2q <- create.equi.X(X2)
library(StatComp20062)
n2 <- 200;p2 <- 100
X2 = matrix(rnorm(n2*p2),n2)
X2q <- create.equi.X(X2)
n2 <- 200;p2 <- 100
X2 = matrix(rnorm(n2*p2),n2)
X2q <- create_equi_X(X2)
devtools::document()
devtools::build_vignettes()
library(StatComp20062)
install.packages('C:/Users/DRZCW/Desktop/StatComp20062_1.0.tar.gz',repo=NULL)
library(StatComp20062)
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
library(StatComp20062)
detach("package:StatComp20062", unload = TRUE)
remove.packages("StatComp20062", lib="~/R/win-library/4.0")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
library(ps)
remove.packages("ps", lib="~/R/win-library/4.0")
library(processx)
library(jsonlite)
library(htmlwidgets)
remove.packages("htmlwidgets", lib="~/R/win-library/4.0")
remove.packages("jsonlite", lib="~/R/win-library/4.0")
remove.packages("processx", lib="~/R/win-library/4.0")
library(usethis)
remove.packages("usethis", lib="~/R/win-library/4.0")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
devtools::install_github("https://github.com/RayLiuUSTC/StatComp20062")
